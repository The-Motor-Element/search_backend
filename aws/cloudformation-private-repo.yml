AWSTemplateFormatVersion: '2010-09-09'
Description: 'Apollo Search Backend - FREE TIER with Private Repo Support'

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0e95a5e2743ec9ec9
    us-west-2:
      AMI: ami-0bbc328167dee8f3c
    eu-west-1:
      AMI: ami-0c1b135a30f3c8aa7
    ap-southeast-1:
      AMI: ami-0c802847a7dd848c0

Parameters:
  ProjectName:
    Type: String
    Default: apollo-search-demo
    Description: Name of the project for resource naming
    
  MeiliMasterKey:
    Type: String
    NoEcho: true
    Description: Master key for Meilisearch
    MinLength: 16
    Default: demo-key-change-in-production
    
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 Key Pair for SSH access
    
  GitHubToken:
    Type: String
    NoEcho: true
    Description: GitHub Personal Access Token for pulling private images
    Default: ""
    
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for VPC
    
  PublicSubnetCidr:
    Type: String
    Default: 10.0.1.0/24
    Description: CIDR block for public subnet

Resources:
  # VPC and Networking (Free Tier)
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-vpc
          
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-igw
          
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
      
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PublicSubnetCidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-public-subnet
          
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-public-routes
          
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  # Security Groups
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${ProjectName}-ec2-sg
      GroupDescription: Security group for EC2 instance
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: SSH access
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP access
        - IpProtocol: tcp
          FromPort: 8001
          ToPort: 8001
          CidrIp: 0.0.0.0/0
          Description: API access
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
          Description: UI access
        - IpProtocol: tcp
          FromPort: 7700
          ToPort: 7700
          CidrIp: 0.0.0.0/0
          Description: Meilisearch access
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-ec2-sg

  # EC2 Instance (t2.micro - Free Tier)
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      InstanceType: t2.micro  # Free Tier eligible
      KeyName: !Ref KeyPairName
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            VolumeSize: 8  # Free Tier: 30 GB total
            DeleteOnTermination: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Enable strict error handling
          set -e
          set -x
          
          # Log everything to a file for debugging
          exec > >(tee /var/log/user-data.log)
          exec 2>&1
          
          echo "Starting Apollo Search Backend deployment..."
          echo "Instance ID: $(curl -s http://169.254.169.254/latest/meta-data/instance-id)"
          echo "Timestamp: $(date)"
          
          # Update system packages
          echo "Updating system packages..."
          yum update -y
          
          # Install Docker
          echo "Installing Docker..."
          yum install -y docker git curl
          
          # Start Docker service
          echo "Starting Docker service..."
          systemctl start docker
          systemctl enable docker
          usermod -a -G docker ec2-user
          
          # Install Docker Compose
          echo "Installing Docker Compose..."
          curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
          
          # Verify Docker Compose installation
          docker-compose --version
          
          # Create deployment directory
          echo "Creating deployment directory..."
          mkdir -p /opt/apollo-search
          cd /opt/apollo-search
          
          # Log in to GitHub Container Registry if token provided
          if [ -n "${GitHubToken}" ] && [ "${GitHubToken}" != "" ]; then
            echo "Logging in to GitHub Container Registry..."
            echo "${GitHubToken}" | docker login ghcr.io -u ${ProjectName} --password-stdin
          fi
          
          # Create docker-compose.yml with pre-built images
          echo "Creating Docker Compose configuration..."
          cat > docker-compose.yml << 'EOF'
          services:
            meilisearch:
              image: getmeili/meilisearch:latest
              ports:
                - "7700:7700"
              environment:
                - MEILI_MASTER_KEY=${MeiliMasterKey}
                - MEILI_ENV=development
                - MEILI_HTTP_ADDR=0.0.0.0:7700
              volumes:
                - meilisearch_data:/meili_data
              restart: unless-stopped
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:7700/health"]
                interval: 30s
                timeout: 10s
                retries: 3
                
            api:
              image: ghcr.io/the-motor-element/apollo-search-api:latest
              ports:
                - "8001:8001"
              environment:
                - MEILI_URL=http://meilisearch:7700
                - MEILI_MASTER_KEY=${MeiliMasterKey}
                - PYTHONPATH=/app
              depends_on:
                meilisearch:
                  condition: service_healthy
              restart: unless-stopped
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
                interval: 30s
                timeout: 10s
                retries: 3
                
            ui:
              image: ghcr.io/the-motor-element/apollo-search-ui:latest
              ports:
                - "8080:8080"
              environment:
                - HOST=0.0.0.0
                - API_URL=http://localhost:8001
              depends_on:
                api:
                  condition: service_healthy
              restart: unless-stopped
              
          volumes:
            meilisearch_data:
          EOF
          
          # Create startup script
          echo "Creating startup script..."
          cat > start-apollo.sh << 'EOF'
          #!/bin/bash
          cd /opt/apollo-search
          echo "Starting Apollo Search Backend..."
          /usr/bin/docker-compose up -d
          echo "Apollo Search Backend started!"
          INSTANCE_IP=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)
          echo "UI: http://$INSTANCE_IP:8080"
          echo "API: http://$INSTANCE_IP:8001/docs"
          echo "MeiliSearch: http://$INSTANCE_IP:7700"
          EOF
          chmod +x start-apollo.sh
          
          # Create systemd service
          echo "Creating systemd service..."
          cat > /etc/systemd/system/apollo-search.service << 'EOF'
          [Unit]
          Description=Apollo Search Backend
          Requires=docker.service
          After=docker.service
          
          [Service]
          Type=forking
          RemainAfterExit=yes
          WorkingDirectory=/opt/apollo-search
          ExecStart=/opt/apollo-search/start-apollo.sh
          ExecStop=/usr/bin/docker-compose -f /opt/apollo-search/docker-compose.yml down
          TimeoutStartSec=300
          Restart=on-failure
          RestartSec=10
          
          [Install]
          WantedBy=multi-user.target
          EOF
          
          # Enable and start the service
          echo "Enabling Apollo Search service..."
          systemctl daemon-reload
          systemctl enable apollo-search.service
          
          # Wait for Docker to be fully ready
          echo "Waiting for Docker to be ready..."
          sleep 15
          
          # Pull images (this might take a while)
          echo "Pulling Docker images..."
          docker-compose pull || echo "Warning: Could not pull some images, will try to start anyway"
          
          # Start the services
          echo "Starting Apollo Search services..."
          systemctl start apollo-search.service
          
          # Wait for services to initialize
          echo "Waiting for services to initialize..."
          sleep 60
          
          # Load demo data
          echo "Loading demo data..."
          sleep 30
          docker-compose exec -T api python scripts/seed.py || echo "Could not load demo data - will continue"
          
          # Get instance IP for final message
          INSTANCE_IP=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)
          
          # Create welcome message
          cat > /home/ec2-user/README.txt << EOF
          ===========================================
          🚀 Apollo Search Backend - Demo Instance
          ===========================================
          
          Your Apollo Search Backend is now running!
          
          🌐 Access URLs:
          - UI: http://$INSTANCE_IP:8080
          - API Docs: http://$INSTANCE_IP:8001/docs
          - MeiliSearch: http://$INSTANCE_IP:7700
          
          📋 Management Commands:
          - Check status: sudo systemctl status apollo-search
          - View logs: sudo journalctl -u apollo-search -f
          - Restart: sudo systemctl restart apollo-search
          - Stop: sudo systemctl stop apollo-search
          
          📁 Project Directory: /opt/apollo-search
          📄 Deployment Log: /var/log/user-data.log
          
          🔧 Docker Commands:
          - Check containers: sudo docker ps
          - View logs: sudo docker-compose -f /opt/apollo-search/docker-compose.yml logs -f
          - Restart services: cd /opt/apollo-search && sudo docker-compose restart
          
          ⚠️  Note: This is a demo deployment on FREE TIER resources.
          EOF
          
          chown ec2-user:ec2-user /home/ec2-user/README.txt
          
          echo "✅ Apollo Search Backend deployment completed successfully!"
          echo "Instance IP: $INSTANCE_IP"
          echo "UI URL: http://$INSTANCE_IP:8080"
          echo "API URL: http://$INSTANCE_IP:8001/docs"
          echo "MeiliSearch URL: http://$INSTANCE_IP:7700"
          
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-instance
        - Key: Environment
          Value: demo

Outputs:
  InstanceId:
    Description: EC2 Instance ID
    Value: !Ref EC2Instance
    
  PublicIP:
    Description: Public IP address of the instance
    Value: !GetAtt EC2Instance.PublicIp
    
  UIUrl:
    Description: Apollo Search UI URL
    Value: !Sub 'http://${EC2Instance.PublicIp}:8080'
    
  APIUrl:
    Description: Apollo Search API Documentation URL
    Value: !Sub 'http://${EC2Instance.PublicIp}:8001/docs'
    
  MeilisearchUrl:
    Description: Meilisearch URL
    Value: !Sub 'http://${EC2Instance.PublicIp}:7700'
    
  SSHCommand:
    Description: SSH command to connect to the instance
    Value: !Sub 'ssh -i ${KeyPairName}.pem ec2-user@${EC2Instance.PublicIp}'
    
  EstimatedMonthlyCost:
    Description: Estimated monthly cost
    Value: '$0.00 (Free Tier) - First 12 months'
