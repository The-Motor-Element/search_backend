AWSTemplateFormatVersion: '2010-09-09'
Description: 'Apollo Search Backend - FREE TIER Demo Deployment'

Parameters:
  ProjectName:
    Type: String
    Default: apollo-search-demo
    Description: Name of the project for resource naming
    
  MeiliMasterKey:
    Type: String
    NoEcho: true
    Description: Master key for Meilisearch
    MinLength: 16
    Default: demo-key-change-in-production
    
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 Key Pair for SSH access
    
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for VPC
    
  PublicSubnetCidr:
    Type: String
    Default: 10.0.1.0/24
    Description: CIDR block for public subnet

Resources:
  # VPC and Networking (Free Tier)
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-vpc
          
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-igw
          
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
      
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PublicSubnetCidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-public-subnet
          
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-public-routes
          
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  # Security Groups
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${ProjectName}-ec2-sg
      GroupDescription: Security group for EC2 instance
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: SSH access
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP access
        - IpProtocol: tcp
          FromPort: 8001
          ToPort: 8001
          CidrIp: 0.0.0.0/0
          Description: API access
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
          Description: UI access
        - IpProtocol: tcp
          FromPort: 7700
          ToPort: 7700
          CidrIp: 0.0.0.0/0
          Description: Meilisearch access
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-ec2-sg

  # IAM Role for EC2 (for CloudWatch logs)
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-ec2-role
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: EC2BasicAccess
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: '*'
                
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2Role

  # EC2 Instance (t2.micro - Free Tier)
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0c02fb55956c7d316  # Amazon Linux 2 AMI (us-east-1)
      InstanceType: t2.micro  # Free Tier eligible
      KeyName: !Ref KeyPairName
      IamInstanceProfile: !Ref EC2InstanceProfile
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            VolumeSize: 8  # Free Tier: 30 GB total
            DeleteOnTermination: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y docker git
          
          # Start Docker
          systemctl start docker
          systemctl enable docker
          usermod -a -G docker ec2-user
          
          # Install Docker Compose
          curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
          
          # Install CloudWatch agent
          yum install -y amazon-cloudwatch-agent
          
          # Create deployment directory
          mkdir -p /opt/apollo-search
          cd /opt/apollo-search
          
          # Create docker-compose file for demo
          cat > docker-compose.yml << 'EOF'
          version: '3.8'
          services:
            meilisearch:
              image: getmeili/meilisearch:latest
              ports:
                - "7700:7700"
              environment:
                - MEILI_MASTER_KEY=${MeiliMasterKey}
                - MEILI_ENV=development
                - MEILI_HTTP_ADDR=0.0.0.0:7700
              volumes:
                - meilisearch_data:/meili_data
              restart: unless-stopped
              
            api:
              image: ghcr.io/the-motor-element/apollo-search-api:latest
              ports:
                - "8001:8001"
              environment:
                - MEILI_URL=http://meilisearch:7700
                - MEILI_MASTER_KEY=${MeiliMasterKey}
                - PYTHONPATH=/app
              depends_on:
                - meilisearch
              restart: unless-stopped
              
            ui:
              image: ghcr.io/the-motor-element/apollo-search-ui:latest
              ports:
                - "8080:8080"
              environment:
                - HOST=0.0.0.0
                - API_URL=http://localhost:8001
              depends_on:
                - api
              restart: unless-stopped
              
          volumes:
            meilisearch_data:
          EOF
          
          # Create startup script
          cat > start-apollo.sh << 'EOF'
          #!/bin/bash
          cd /opt/apollo-search
          /usr/bin/docker-compose up -d
          echo "Apollo Search Backend started!"
          echo "UI: http://$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4):8080"
          echo "API: http://$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4):8001/docs"
          EOF
          chmod +x start-apollo.sh
          
          # Create systemd service for auto-start
          cat > /etc/systemd/system/apollo-search.service << 'EOF'
          [Unit]
          Description=Apollo Search Backend
          Requires=docker.service
          After=docker.service
          
          [Service]
          Type=oneshot
          RemainAfterExit=yes
          WorkingDirectory=/opt/apollo-search
          ExecStart=/usr/bin/docker-compose up -d
          ExecStop=/usr/bin/docker-compose down
          TimeoutStartSec=0
          
          [Install]
          WantedBy=multi-user.target
          EOF
          
          systemctl enable apollo-search.service
          
          # Set up CloudWatch logging
          cat > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json << 'EOF'
          {
            "logs": {
              "logs_collected": {
                "files": {
                  "collect_list": [
                    {
                      "file_path": "/var/log/messages",
                      "log_group_name": "/aws/ec2/apollo-search",
                      "log_stream_name": "system-logs"
                    }
                  ]
                }
              }
            }
          }
          EOF
          
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
            -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s
          
          # Wait for Docker to be ready and start services
          sleep 30
          systemctl start apollo-search.service
          
          # Create welcome message
          cat > /home/ec2-user/README.txt << 'EOF'
          ===========================================
          🚀 Apollo Search Backend - Demo Instance
          ===========================================
          
          Your Apollo Search Backend is now running!
          
          🌐 Access URLs:
          - UI: http://YOUR_INSTANCE_IP:8080
          - API Docs: http://YOUR_INSTANCE_IP:8001/docs
          - Meilisearch: http://YOUR_INSTANCE_IP:7700
          
          📋 Management Commands:
          - Start services: sudo systemctl start apollo-search
          - Stop services: sudo systemctl stop apollo-search
          - View logs: sudo docker-compose -f /opt/apollo-search/docker-compose.yml logs -f
          - Restart: sudo systemctl restart apollo-search
          
          📁 Project Directory: /opt/apollo-search
          
          🔧 To load demo data:
          1. SSH into this instance
          2. cd /opt/apollo-search
          3. sudo docker-compose exec api python scripts/docker_load_data.py
          
          ⚠️  Note: This is a demo deployment on FREE TIER resources.
          EOF
          
          chown ec2-user:ec2-user /home/ec2-user/README.txt
          
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-instance
        - Key: Environment
          Value: demo

  # CloudWatch Log Group (Free Tier: 5GB ingestion, 5GB storage)
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/ec2/apollo-search
      RetentionInDays: 3  # Keep costs minimal

Outputs:
  InstanceId:
    Description: EC2 Instance ID
    Value: !Ref EC2Instance
    
  PublicIP:
    Description: Public IP address of the instance
    Value: !GetAtt EC2Instance.PublicIp
    
  UIUrl:
    Description: Apollo Search UI URL
    Value: !Sub 'http://${EC2Instance.PublicIp}:8080'
    
  APIUrl:
    Description: Apollo Search API Documentation URL
    Value: !Sub 'http://${EC2Instance.PublicIp}:8001/docs'
    
  MeilisearchUrl:
    Description: Meilisearch URL
    Value: !Sub 'http://${EC2Instance.PublicIp}:7700'
    
  SSHCommand:
    Description: SSH command to connect to the instance
    Value: !Sub 'ssh -i ${KeyPairName}.pem ec2-user@${EC2Instance.PublicIp}'
    
  EstimatedMonthlyCost:
    Description: Estimated monthly cost
    Value: '$0.00 (Free Tier) - First 12 months'
