AWSTemplateFormatVersion: '2010-09-09'
Description: 'Apollo Search Backend - FREE TIER Demo Deployment (No IAM)'

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0e95a5e2743ec9ec9
    us-west-2:
      AMI: ami-0bbc328167dee8f3c
    eu-west-1:
      AMI: ami-0c1b135a30f3c8aa7
    ap-southeast-1:
      AMI: ami-0c802847a7dd848c0

Parameters:
  ProjectName:
    Type: String
    Default: apollo-search-demo
    Description: Name of the project for resource naming
    
  MeiliMasterKey:
    Type: String
    NoEcho: true
    Description: Master key for Meilisearch
    MinLength: 16
    Default: demo-key-change-in-production
    
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 Key Pair for SSH access
    
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for VPC
    
  PublicSubnetCidr:
    Type: String
    Default: 10.0.1.0/24
    Description: CIDR block for public subnet

Resources:
  # VPC and Networking (Free Tier)
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-vpc
          
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-igw
          
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
      
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PublicSubnetCidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-public-subnet
          
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-public-routes
          
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  # Security Groups
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${ProjectName}-ec2-sg
      GroupDescription: Security group for EC2 instance
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: SSH access
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP access
        - IpProtocol: tcp
          FromPort: 8001
          ToPort: 8001
          CidrIp: 0.0.0.0/0
          Description: API access
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
          Description: UI access
        - IpProtocol: tcp
          FromPort: 7700
          ToPort: 7700
          CidrIp: 0.0.0.0/0
          Description: Meilisearch access
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-ec2-sg

  # EC2 Instance (t2.micro - Free Tier) - No IAM Role
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      InstanceType: t2.micro  # Free Tier eligible
      KeyName: !Ref KeyPairName
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            VolumeSize: 8  # Free Tier: 30 GB total
            DeleteOnTermination: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Enable error logging but don't exit on first error
          set -x
          
          # Log everything to a file for debugging
          exec > >(tee /var/log/user-data.log)
          exec 2>&1
          
          echo "Starting Apollo Search Backend deployment..."
          echo "Instance ID: $(curl -s http://169.254.169.254/latest/meta-data/instance-id)"
          echo "Timestamp: $(date)"
          
          # Function to handle errors gracefully
          handle_error() {
            echo "ERROR: $1"
            echo "Timestamp: $(date)"
            echo "Continuing deployment despite error..."
            echo "ERROR: $1" >> /var/log/deployment-errors.log
          }
          
          # Update system packages
          echo "Updating system packages..."
          yum update -y || handle_error "Package update failed"
          
          # Install Docker
          echo "Installing Docker..."
          yum install -y docker git curl || handle_error "Docker installation failed"
          
          # Start Docker service
          echo "Starting Docker service..."
          systemctl start docker || handle_error "Docker start failed"
          systemctl enable docker || handle_error "Docker enable failed"
          usermod -a -G docker ec2-user || handle_error "User group modification failed"
          
          # Install Docker Compose
          echo "Installing Docker Compose..."
          curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose || handle_error "Docker Compose download failed"
          chmod +x /usr/local/bin/docker-compose || handle_error "Docker Compose chmod failed"
          ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose || handle_error "Docker Compose symlink failed"
          
          # Verify Docker Compose installation
          docker-compose --version || handle_error "Docker Compose verification failed"
          
          # Clone the public repository
          echo "Cloning repository..."
          git clone https://github.com/The-Motor-Element/search_backend.git /opt/apollo-search || handle_error "Repository clone failed"
          cd /opt/apollo-search || handle_error "Directory change failed"
          
          # Make scripts executable
          chmod +x scripts/*.py || echo "No Python scripts to make executable"
          
          # Build and start services
          echo "Building and starting services..."
          docker-compose up -d || handle_error "Docker compose up failed"
          
                    # Wait for services to initialize
          echo "Waiting for services to initialize..."
          sleep 60
          
          # Wait for services to be ready
          echo "Waiting for services to be ready..."
          sleep 30
          
          # Check if services are running before data loading
          echo "Verifying services are running..."
          if ! docker-compose ps | grep -q "Up"; then
            handle_error "Services not running properly"
            echo "Attempting to restart services..."
            docker-compose down || handle_error "Docker compose down failed"
            sleep 10
            docker-compose up -d || handle_error "Docker compose restart failed"
            sleep 30
          fi
          
          # Load demo data (single attempt)
          echo "Loading demo data..."
          if [ -f "scripts/load_apollo_data.py" ]; then
            echo "Loading Apollo tire data..."
            docker-compose exec -T api python scripts/load_apollo_data.py || handle_error "Apollo data loading failed"
          elif [ -f "scripts/seed.py" ]; then
            echo "Loading seed data..."
            docker-compose exec -T api python scripts/seed.py || handle_error "Seed data loading failed"
          else
            echo "No data loading script found - skipping data load"
          fi
          
          # Create startup script
          echo "Creating startup script..."
          cat > start-apollo.sh << 'EOF'
          #!/bin/bash
          cd /opt/apollo-search
          echo "Starting Apollo Search Backend..."
          /usr/bin/docker-compose up -d
          echo "Apollo Search Backend started!"
          INSTANCE_IP=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)
          echo "UI: http://$INSTANCE_IP:8080"
          echo "API: http://$INSTANCE_IP:8001/docs"
          echo "MeiliSearch: http://$INSTANCE_IP:7700"
          EOF
          chmod +x start-apollo.sh
          
          # Create systemd service
          echo "Creating systemd service..."
          cat > /etc/systemd/system/apollo-search.service << 'EOF'
          [Unit]
          Description=Apollo Search Backend
          Requires=docker.service
          After=docker.service
          
          [Service]
          Type=forking
          RemainAfterExit=yes
          WorkingDirectory=/opt/apollo-search
          ExecStart=/opt/apollo-search/start-apollo.sh
          ExecStop=/usr/bin/docker-compose -f /opt/apollo-search/docker-compose.yml down
          TimeoutStartSec=300
          Restart=on-failure
          RestartSec=10
          
          [Install]
          WantedBy=multi-user.target
          EOF
          
          # Enable and start the service
          echo "Enabling Apollo Search service..."
          systemctl daemon-reload || handle_error "Systemd daemon reload failed"
          systemctl enable apollo-search.service || handle_error "Service enable failed"
          
          # Wait for Docker to be fully ready
          echo "Waiting for Docker to be ready..."
          sleep 15
          
          # Start the services
          echo "Starting Apollo Search services..."
          systemctl start apollo-search.service || handle_error "Service start failed"
          
          # Wait for services to initialize with timeout
          echo "Waiting for services to initialize..."
          sleep 30
          
          # Verify services are running with error handling
          echo "Verifying services..."
          if ! docker-compose -f /opt/apollo-search/docker-compose.yml ps; then
            handle_error "Failed to check service status"
          fi
          
          # Test MeiliSearch with better error handling
          echo "Testing MeiliSearch connection..."
          if ! timeout 60 bash -c 'until curl -s http://localhost:7700/health; do echo "Waiting for MeiliSearch..."; sleep 5; done'; then
            handle_error "MeiliSearch health check failed"
          else
            echo "MeiliSearch is healthy!"
          fi
          
          # Create welcome message
          cat > /home/ec2-user/README.txt << EOF
          ===========================================
          🚀 Apollo Search Backend - Demo Instance
          ===========================================
          
          Your Apollo Search Backend is now running!
          
          🌐 Access URLs:
          - UI: http://$INSTANCE_IP:8080
          - API Docs: http://$INSTANCE_IP:8001/docs
          - MeiliSearch: http://$INSTANCE_IP:7700
          
          📋 Management Commands:
          - Check status: sudo systemctl status apollo-search
          - View logs: sudo journalctl -u apollo-search -f
          - Restart: sudo systemctl restart apollo-search
          - Stop: sudo systemctl stop apollo-search
          
          📁 Project Directory: /opt/apollo-search
          📄 Deployment Log: /var/log/user-data.log
          
          🔧 Docker Commands:
          - Check containers: sudo docker ps
          - View logs: sudo docker-compose -f /opt/apollo-search/docker-compose.yml logs -f
          - Restart services: cd /opt/apollo-search && sudo docker-compose restart
          
          🔍 Apollo Tire Search:
          - Search over 1500+ Apollo tire products
          - Brand: Apollo (Premium tire manufacturer)
          - Categories: Passenger Car, Two Wheeler, Commercial Vehicle
          - Features: Size, speed rating, load index search
          
          ⚠️  Note: This is a demo deployment on FREE TIER resources.
          EOF
          
          chown ec2-user:ec2-user /home/ec2-user/README.txt
          
          # Final deployment verification
          echo "=== Final Deployment Verification ==="
          echo "Checking all services status..."
          
          # Check Docker is running
          if systemctl is-active --quiet docker; then
            echo "✅ Docker service is running"
          else
            handle_error "Docker service is not running"
          fi
          
          # Check if containers are running
          if docker-compose -f /opt/apollo-search/docker-compose.yml ps | grep -q "Up"; then
            echo "✅ Docker containers are running"
          else
            handle_error "Docker containers are not running properly"
          fi
          
          # Check MeiliSearch one more time
          if curl -s http://localhost:7700/health > /dev/null; then
            echo "✅ MeiliSearch is responding"
          else
            handle_error "MeiliSearch is not responding"
          fi
          
          # Log final status
          echo "=== Deployment Summary ==="
          echo "Started: $(head -1 /var/log/user-data.log | grep "Starting Apollo")"
          echo "Completed: $(date)"
          if [ -f /var/log/deployment-errors.log ]; then
            echo "Errors encountered: $(wc -l < /var/log/deployment-errors.log)"
            echo "Error details in: /var/log/deployment-errors.log"
          else
            echo "No errors logged"
          fi
          
          echo "✅ Apollo Search Backend deployment completed successfully!"
          echo "Instance IP: $INSTANCE_IP"
          echo "UI URL: http://$INSTANCE_IP:8080"
          echo "API URL: http://$INSTANCE_IP:8001/docs"
          echo "MeiliSearch URL: http://$INSTANCE_IP:7700"
          
          # Signal successful completion
          echo "🎉 UserData script completed at $(date)"
          echo "🎉 DEPLOYMENT_SUCCESS" > /tmp/deployment_status
          
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-instance
        - Key: Environment
          Value: demo

Outputs:
  InstanceId:
    Description: EC2 Instance ID
    Value: !Ref EC2Instance
    
  PublicIP:
    Description: Public IP address of the instance
    Value: !GetAtt EC2Instance.PublicIp
    
  UIUrl:
    Description: Apollo Search UI URL
    Value: !Sub 'http://${EC2Instance.PublicIp}:8080'
    
  APIUrl:
    Description: Apollo Search API Base URL
    Value: !Sub 'http://${EC2Instance.PublicIp}:8001'
    
  MeilisearchUrl:
    Description: Meilisearch URL
    Value: !Sub 'http://${EC2Instance.PublicIp}:7700'
    
  SSHCommand:
    Description: SSH command to connect to the instance
    Value: !Sub 'ssh -i ${KeyPairName}.pem ec2-user@${EC2Instance.PublicIp}'
    
  EstimatedMonthlyCost:
    Description: Estimated monthly cost
    Value: '$0.00 (Free Tier) - First 12 months'
