name: Test and Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Test Docker Compose compatibility
      run: |
        python scripts/test_docker_compose.py
        
    - name: Start services with Docker Compose
      env:
        MEILI_MASTER_KEY: test_key_for_ci
        MEILI_ENV: development
        API_BASE_URL: http://localhost:8001
        MEILI_URL: http://localhost:7700
      run: |
        # Start services in detached mode
        docker compose up -d
        
        # Wait a bit for services to initialize
        echo "Waiting for services to initialize..."
        sleep 10
        
        # Show running containers and ports
        echo "Docker containers status:"
        docker compose ps
        
        # Show detailed port mappings
        echo "Port mappings:"
        docker compose port api 8001 || echo "API port mapping not found"
        docker compose port meilisearch 7700 || echo "Meilisearch port mapping not found"
        
        # Debug service status
        echo "Detailed service debug:"
        python scripts/debug_docker_services.py
        
        # Validate port configuration
        python scripts/validate_docker_ports.py
        
    - name: Wait for services to be healthy
      env:
        MEILI_URL: http://localhost:7700
        API_BASE_URL: http://localhost:8001
        MEILI_MASTER_KEY: test_key_for_ci
      run: |
        # Install requests for health check script
        pip install requests
        
        # Run comprehensive health checks with extended timeout
        python scripts/test_health_checks.py
        
        # Additional manual verification
        echo "Final service verification..."
        timeout 60 bash -c 'until curl -s http://localhost:7700/health > /dev/null; do sleep 1; done'
        timeout 60 bash -c 'until curl -s http://localhost:8001/health > /dev/null; do sleep 1; done'
        echo "All services confirmed healthy!"
        
    - name: Run simple health tests
      env:
        API_BASE_URL: http://localhost:8001
        MEILI_URL: http://localhost:7700
        MEILI_MASTER_KEY: test_key_for_ci
      run: |
        # Run ultra-simple connectivity test first (no dependencies)
        python tests/test_ultra_simple.py
        
        # Then run more comprehensive tests
        python tests/test_simple_health.py
        
    - name: Run tests
      env:
        API_BASE_URL: http://localhost:8001
        MEILI_URL: http://localhost:7700
        MEILI_MASTER_KEY: test_key_for_ci
      run: |
        # Run tests with the correct API URL
        python -m pytest tests/test_endpoints.py -v
        
    - name: Show service logs on failure
      if: failure()
      run: |
        echo "=== Meilisearch logs ==="
        docker compose logs meilisearch
        echo "=== API logs ==="
        docker compose logs api
        
    - name: Cleanup
      if: always()
      run: |
        docker compose down -v
